name: CI/CD Pipeline for Bookstore App

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build frontend before Docker build
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
          cd ..

      # ✅ Step 4: Build backend (optional pre-step, if using Maven/Gradle)
      - name: Build Backend
        run: |
          cd backend
          ./mvnw clean package -DskipTests
          cd ..

      # ✅ Step 5: Build and Push Docker Images (Frontend + Backend)
      - name: Build and Push Docker Images
        run: |
          docker compose build --no-cache
          docker compose push

      # ✅ Step 6: Copy docker-compose.yml to EC2
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/app"

      # ✅ Step 7: Download MySQL dump into EC2 (refresh database init)
      - name: Download SQL Dump to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/app/db_init
            cd ~/app/db_init
            curl -O https://raw.githubusercontent.com/akshayana/DTCC-Bookstore/main/db_init/Bookstore_db_dump.sql
            ls -l ~/app/db_init

      # ✅ Step 8: Deploy updated containers to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/app
            echo "Stopping old containers..."
            docker-compose down -v || true

            echo "Pulling latest images..."
            docker-compose pull

            echo "Starting containers..."
            docker-compose up -d
